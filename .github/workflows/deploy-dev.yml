# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - dev
      - cicd

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: make application.yml
        run: |
          mkdir ./src/main/resources 
          cd ./src/main/resources # resources 폴더로 이동
#          touch ./application.yml # application.yml 생성
#          touch ./application-dev.yml # application-dev.yml 생성
#          echo "${{ secrets.APPLICATION }}" > ./application.yml # github actions에서 설정한 값을 application.yml 파일에 쓰기
#          echo "${{ secrets.APPLICATION_DEV }}" > ./application-dev.yml

          mkdir ./firebase
          cd ./firebase
          touch ./firebase-key.json
          echo echo "${{ secrets.FIREBASE_DEV }}" > ./firebase.json
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker build & push
        run: |
          docker build -f Dockerfile.dev -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
      

      ## deploy to production
      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.AWS_USERNAME }} # ubuntu
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f redis
            sudo docker rm -f yakgwa-dev
#            sudo docker pull redis
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
            ## 여러분이 원하는 경로로 이동합니다.
            cd /home/ubuntu/
            
            ## .env 파일을 생성합니다.
            sudo touch .env
            echo "${{ secrets.ENV_VARS }}" | sudo tee .env > /dev/null
            
            ## docker-compose.yaml 파일을 생성합니다.
            sudo touch docker-compose.yaml
            echo "${{ secrets.DOCKER_COMPOSE }}" | sudo tee docker-compose.yaml > /dev/null
            
            ## docker-compose를 실행합니다.
            sudo chmod 666 /var/run/docker.sock
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
            sudo docker pull redis
            docker-compose -f docker-compose.yaml --env-file ./.env up -d
            docker image prune -f
            
            
#            sudo docker-compose up -d
#            docker run -d -p 6379:6379 --network yakgwa-network --name redis redis
#            docker run -d -p 8081:8081 --network yakgwa-network --name yakgwa-dev ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
#            docker image prune -f


  current-time:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Current Time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH:mm:ss
          utcOffset: "+09:00" # 기준이 UTC이기 때문에 한국시간인 KST를 맞추기 위해 +9시간 추가

      - name: Print Current Time
        run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
        shell: bash
