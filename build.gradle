plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'jacoco'
}

group = 'com.prography'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.8"
//     reportsDir = file("$buildDir/customJacocoReportDir")
}
jacocoTestReport {
    def Qdomains = []
    for(qPattern in "**/QA" .. "**/QZ"){
        Qdomains.add(qPattern+"*")
    }
    dependsOn test

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    // 결과 리포트에서 제외할 클래스들
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    'com/prography/yakgwa/global/**' // global 패키지 하위 모든 클래스 제외
            ] + Qdomains)
        }))
    }
    finalizedBy 'jacocoTestCoverageVerification'
}
jacocoTestCoverageVerification {
    def Qdomains = []
    // 패키지 + 클래스명
    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
            // 제외할 클래스들
            excludes = [
                    '*.XXXApplication',
                    'com.prography.yakgwa.global.*'
            ] + Qdomains
        }
    }
}
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

dependencies {
    //jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //validator
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok:1.18.22'

    // h2
    runtimeOnly 'com.h2database:h2'

    // webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2', 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    //mockserver
    testImplementation 'com.squareup.okhttp3:mockwebserver'

    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.22.1'

    //embedded-redis
    testImplementation 'it.ozimov:embedded-redis:0.7.2'

    //testcontainer
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.17.2'

    //mysql
    implementation 'mysql:mysql-connector-java:8.0.32'

    //querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //fcm
    implementation 'com.google.firebase:firebase-admin:6.8.1'

    //s3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    testImplementation 'io.findify:s3mock_2.13:0.2.6'

    //test
    implementation 'com.google.code.findbugs:findbugs-annotations:3.0.1'
    implementation 'net.java.dev.jna:jna:5.8.0'
    implementation 'net.java.dev.jna:jna-platform:5.8.0'
    testImplementation 'org.mockito:mockito-inline:3.11.2'

    //log-to-cloudwatch
    implementation group: 'ca.pjer', name: 'logback-awslogs-appender', version: '1.6.0'
}

/**
 * QueryDSL Build Options
 */
def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}

bootJar {
    duplicatesStrategy = 'exclude'
}

tasks.named('test') {
    useJUnitPlatform()
}
